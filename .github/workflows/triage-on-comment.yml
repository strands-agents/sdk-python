                      name: Triage on Comment

on:
  issue_comment:
    types: [created]

permissions:
  issues: write
  pull-requests: write

env:
  LABEL_AWAITING_TEAM: "awaiting team"
  LABEL_AWAITING_CUSTOMER: "awaiting customer"
  APPLY_TO_PULL_REQUESTS: "false"
  TEAM_USERNAMES: ""  # Comma-separated list, e.g. "user1,user2,user3"
  PERMISSION_MODE: "write-access"  # Either "users" or "write-access"

jobs:
  label-comment:
    runs-on: ubuntu-latest
    steps:
      - name: Check user permissions
        id: check-permissions
        uses: actions/github-script@v8
        with:
          script: |
            const issueNumber = context.issue.number;
            const issueType = github.event.issue.pull_request ? 'PR' : 'Issue';
            
            // Skip if issue is a PR and not configured to support PR
            if (issueType === 'PR' && process.env.APPLY_TO_PULL_REQUESTS !== 'true'){
              console.log(`Skipping Issue ${issueNumber} is a PR and PRs are not configured.`);
              core.setOutput('skip', 'true');
              return;
            } 
            
            // Skip if commenter is a bot
            if (context.actor.endsWith('[bot]')) {
              console.log(`Skipping bot user: ${context.actor}`);
              core.setOutput('skip', 'true');
              return;
            }
            
            let hasWriteAccess = false;
            const permissionMode = process.env.PERMISSION_MODE;
            
            console.log(`Processing ${issueType} #${issueNumber}, commenter: ${context.actor}, mode: ${permissionMode}`);
            
            if (permissionMode === 'users') {
              const teamUsernames = process.env.TEAM_USERNAMES;
              const userList = teamUsernames ? teamUsernames.split(',').map(u => u.trim()) : [];
              hasWriteAccess = !userList.includes(context.actor);
              console.log(`Username list mode - User ${context.actor} classified as: ${hasWriteAccess ? 'customer' : 'team member'}`);
            } else {
              const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: context.actor
              });
              hasWriteAccess = ['admin', 'write'].includes(permission.permission);
              console.log(`Write-access mode - User ${context.actor} permission: ${permission.permission}, classified as: ${hasWriteAccess ? 'customer' : 'team member'}`);
            }
            
            const labelToAdd = hasWriteAccess ? process.env.LABEL_AWAITING_CUSTOMER : process.env.LABEL_AWAITING_TEAM;
            
            console.log(`${issueType} #${issueNumber}: Will apply label "${labelToAdd}"`);
            
            core.setOutput('label-to-add', labelToAdd);
            core.setOutput('skip', 'false');

      - name: Update labels
        if: steps.check-permissions.outputs.skip == 'false'
        uses: actions/github-script@v8
        with:
          script: |
            const issueNumber = context.issue.number;
            const labelToAdd = '${{ steps.check-permissions.outputs.label-to-add }}';
            const issueType = github.event.issue.pull_request ? 'PR' : 'Issue';
            
            // Get current labels
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            
            // Filter out conflicting labels and add new one
            const conflictingLabels = [process.env.LABEL_AWAITING_TEAM, process.env.LABEL_AWAITING_CUSTOMER];
            const newLabels = issue.labels
              .map(label => label.name)
              .filter(name => !conflictingLabels.includes(name))
              .concat([labelToAdd]);
            
            // Replace all labels atomically
            await github.rest.issues.setLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              labels: newLabels
            });
            
            console.log(`${issueType} #${issueNumber}: Successfully applied label "${labelToAdd}"`);